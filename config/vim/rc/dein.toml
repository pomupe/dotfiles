# Plugin manager
[[plugins]]
repo = 'Shougo/dein.vim'

# Colorscheme
[[plugins]]
repo = 'jpo/vim-railscasts-theme'
hook_add = '''
  autocmd MyAutoCmd VimEnter * nested colorscheme railscasts
'''

# Colorscheme
# [[plugins]]
# repo = 'tomasr/molokai'

# Unite: search and display arbitrary sources
[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_add = '''
  " Unite key mappings {{{
  " Start unite in insert mode immediately
  let g:unite_enable_start_insert=1
  " Set <Space>u as Unite prefix key
  nnoremap [unite]  <Nop>
  nmap     <Space>u [unite]
  " Display buffers when [unite]b is pressed
  nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
  " Display files and buffers when [unite]f is pressed
  nnoremap <silent> [unite]f :<C-u>Unite file buffer<CR>
  " Display MRU files when [unite]m is pressed
  nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
  " Create new file or directory with unite when [unite]n is pressed
  nnoremap <silent> [unite]n :<C-u>Unite file/new<CR>
  " Display registers when [unite]r is pressed
  nnoremap <silent> [unite]r :<C-u>Unite register<CR>
  " Exit the unite buffer when <Esc><Esc> is pressed
  augroup UniteAutoCmd
    autocmd!
    autocmd FileType unite nnoremap <silent> <buffer> <Esc><Esc> :q<CR>
    autocmd FileType unite inoremap <silent> <buffer> <Esc><Esc> <Esc>:q<CR>
  augroup END
  " }}}
'''

# Unite MRU sources
[[plugins]]
repo = 'Shougo/neomru.vim'
on_path = '.*'

# Git wrapper
[[plugins]]
repo =  'tpope/vim-fugitive'
hook_add = '''
  " Status line setup {{{
  " Always show the status line
  set laststatus=2
  " Display file name
  set statusline=%F
  " Display [help] with opening help files
  set statusline+=%h
  " Display [+] if file is modified
  set statusline+=%m
  " show [RO] if file is readonly
  set statusline+=%r
  " Right justify
  set statusline+=%=
  " Display line number / number of lines
  set statusline+=[%l/%L]
  " Display git branch name
  set statusline+=%{fugitive#statusline()}
  " Display type of file
  set statusline+=%y
  " Display file encoding and EOL types
  set statusline+=[%{&fenc}:%{&ff}]
  " }}}
'''

# Completion
[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = 'has("lua")'
on_i = 1
hook_add = '''
  " neocomplete configuration {{{
  " See also : https://github.com/Shougo/neocomplete.vim
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0

  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1

  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

  " Enable camel case completion
  let g:neocomplete#enable_underbar_completion = 1

  " Define dictionary.
  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ }

  " Define keyword.
  if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction

  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"

  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

  " Close popup by <Space>.
  "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

  " AutoComplPop like behavior.
  "let g:neocomplete#enable_auto_select = 1

  " Shell like behavior (not recommended.)
  "set completeopt+=longest
  "let g:neocomplete#enable_auto_select = 1
  "let g:neocomplete#disable_auto_complete = 1
  "inoremap <expr><TAB>  pumvisible() ? "\<Down>" :
  " \ neocomplete#start_manual_complete()

  " Enable omni completion.
  augroup NeocompleteAutoCmd
    autocmd!
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  augroup END

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  "let g:neocomplete#sources#omni#input_patterns.php =
  "\ '[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
  "let g:neocomplete#sources#omni#input_patterns.c =
  "\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?'
  "let g:neocomplete#sources#omni#input_patterns.cpp =
  "\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

  " For perlomni.vim setting.
  " https://github.com/c9s/perlomni.vim
  let g:neocomplete#sources#omni#input_patterns.perl =
  \ '[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

  " For smart TAB completion.
  "inoremap <expr><TAB>  pumvisible() ? "\<C-n>" :
  "        \ <SID>check_back_space() ? "\<TAB>" :
  "        \ neocomplete#start_manual_complete()
  "  function! s:check_back_space() "
  "    let col = col('.') - 1
  "    return !col || getline('.')[col - 1]  =~ '\s'
  "  endfunction"
  " }}}
'''

# Open URI with browser
[[plugins]]
repo = 'tyru/open-browser.vim'
if = 'has("win32") || has("win64")'
hook_add = '''
  " Open-browser key mappings {{{
  " disable netrw's gx mapping.
  let g:netrw_nogx = 1
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
  " }}}
'''

# Seemless navigation between tmux panes and vim splits
[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
if = 'has("unix")'
#hook_add = '''
#  nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
#'''

#####
# Language
#####

## toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

## markdown
[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = ['markdown']

[[plugins]]
repo = 'kannokanno/previm'
depends = 'open-browser.vim'
if = 'has("win32") || has("win64")'
on_ft = ['markdown']
hook_add = '''
  nnoremap <Space>p :PrevimOpen<cr>
'''

## bash
[[plugins]]
repo = 'vim-scripts/bats.vim'
on_ft = ['sh']

## ruby
[[plugins]]
repo = 'nelstrom/vim-textobj-rubyblock'
on_ft = ['ruby']

# vim: foldmethod=marker
